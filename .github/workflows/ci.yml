# This clippys, docs, tests, builds.

name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: "full"

jobs:
  ci:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [windows-2019, macos-11, ubuntu-20.04]
        build: [dev, release]

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Cache
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo
          ~/.rustup
          target
        key: ${{ matrix.os }}-${{ matrix.build }}

    - name: Install dependencies
      run: |
        rustup update
        if [ "$RUNNER_OS" == "Linux" ]; then
          sudo apt update
          sudo apt install -y libgtk-3-dev libasound2-dev libjack-dev libpulse-dev
        elif [ "$RUNNER_OS" == "macOS" ]; then
          rustup target add aarch64-apple-darwin
        fi
      shell: bash

    - name: Clippy
      run: cargo clippy --workspace --profile ${{ matrix.build }}

    - name: Doc
      run: cargo doc --workspace --no-deps --profile ${{ matrix.build }}
      env:
        RUSTFLAGS: -Awarnings

    - name: Test
      run: cargo test --package shukusai --profile ${{ matrix.build }}

    - name: Build
      shell: bash
      run: |
        # ARM builds.
        if [ "$RUNNER_OS" == "macOS" ]; then
          cargo build --workspace --profile ${{ matrix.build }} --target aarch64-apple-darwin
        fi
        cargo build --workspace --profile ${{ matrix.build }}

    - name: Compress
      if: matrix.build == 'release'
      shell: bash
      run: |
        mkdir OUTPUT
        VERSION="$(grep -m1 "version" gui/Cargo.toml | grep -o "[0-9].[0-9].[0-9]")"

        if [ "$RUNNER_OS" == "Linux" ]; then
          # AppImage
          utils/mk_appimage.sh
          mv utils/"Festival-v${VERSION}-x86_64.AppImage" OUTPUT/

          # Tar
          cp assets/images/icon/512.png target/release/festival.png
          cp utils/Festival.AppDir/festival.desktop target/release/
          cp LICENSE target/release/
          cd target/release
          tar -czpf "Festival-v${VERSION}-linux-x64.tar.gz" festival festival.png festival.desktop LICENSE
          mv "Festival-v${VERSION}-linux-x64.tar.gz" ../../OUTPUT/
        elif [ "$RUNNER_OS" == "macOS" ]; then
          # x64
          utils/mk_app.sh
          utils/mk_dmg.sh "Festival-v${VERSION}-macos-x64"
          mv utils/"Festival-v${VERSION}-macos-x64.dmg" OUTPUT/

          # ARM64
          mv target/aarch64-apple-darwin/release/festival target/release/
          utils/mk_app.sh
          utils/mk_dmg.sh "Festival-v${VERSION}-macos-arm64"
          mv utils/"Festival-v${VERSION}-macos-arm64.dmg" OUTPUT/
        elif [ "$RUNNER_OS" == "Windows" ]; then
          # Zip
          mv target/release/festival.exe target/release/Festival.exe
          cd target/release
          powershell Compress-Archive -LiteralPath Festival.exe -DestinationPath "Festival-v${VERSION}-windows-x64.zip"
          mv "Festival-v${VERSION}-windows-x64.zip" ../../OUTPUT/
        fi

    - name: Archive
      if: matrix.build == 'release'
      uses: actions/upload-artifact@v3
      with:
        name: festival-${{ matrix.os }}
        path: OUTPUT
